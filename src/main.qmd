---
title: "AT Study"
execute:
  echo: true
  warning: false
---

## Introduction

TBA

## Quarto

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Import and clean-up data

```{r}
suppressPackageStartupMessages(library(caret))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(vioplot))
suppressPackageStartupMessages(library(tidyverse))
```

```{r}
dfRaw <- read.csv(file = '../data/results.csv', header = TRUE, sep = ';')
head(dfRaw)

tcColumns <- c('TC1_seconds_user_done', 'TC2_seconds_user_done', 'TC3_seconds_user_done', 'TC4_seconds_user_done', 'TC5_seconds_user_done', 'TC6_seconds_user_done', 'TC7_seconds_user_done', 'TC8_seconds_user_done')
tcNames <- c('TC1', 'TC2', 'TC3', 'TC4', 'TC5', 'TC6', 'TC7', 'TC8')

df <- dfRaw %>% mutate(
  TC_sum = TC1_seconds + TC2_seconds + TC3_seconds + TC4_seconds + TC5_seconds + TC6_seconds + TC7_seconds + TC8_seconds,
  TC_sum_user_done = TC1_seconds_user_done + TC2_seconds_user_done + TC3_seconds_user_done + TC4_seconds_user_done + TC5_seconds_user_done + TC6_seconds_user_done + TC7_seconds_user_done + TC8_seconds_user_done,
  Online_session = as.logical(Online_session))

```
## Seperate two treatments
```{r}
tc1M <- df %>% filter(TC1_treatment == 'M') %>% select(tcColumns[1]) %>% pull(tcColumns[1])
tc1A <- df %>% filter(TC1_treatment == 'A') %>% select(tcColumns[1]) %>% pull(tcColumns[1])

tc2M <- df %>% filter(TC2_treatment == 'M') %>% select(tcColumns[2]) %>% pull(tcColumns[2])
tc2A <- df %>% filter(TC2_treatment == 'A') %>% select(tcColumns[2]) %>% pull(tcColumns[2])

tc3M <- df %>% filter(TC3_treatment == 'M') %>% select(tcColumns[3]) %>% pull(tcColumns[3])
tc3A <- df %>% filter(TC3_treatment == 'A') %>% select(tcColumns[3]) %>% pull(tcColumns[3])

tc4M <- df %>% filter(TC4_treatment == 'M') %>% select(tcColumns[4]) %>% pull(tcColumns[4])
tc4A <- df %>% filter(TC4_treatment == 'A') %>% select(tcColumns[4]) %>% pull(tcColumns[4])

tc5M <- df %>% filter(TC5_treatment == 'M') %>% select(tcColumns[5]) %>% pull(tcColumns[5])
tc5A <- df %>% filter(TC5_treatment == 'A') %>% select(tcColumns[5]) %>% pull(tcColumns[5])

tc6M <- df %>% filter(TC6_treatment == 'M') %>% select(tcColumns[6]) %>% pull(tcColumns[6])
tc6A <- df %>% filter(TC6_treatment == 'A') %>% select(tcColumns[6]) %>% pull(tcColumns[6])

tc7M <- df %>% filter(TC7_treatment == 'M') %>% select(tcColumns[7]) %>% pull(tcColumns[7])
tc7A <- df %>% filter(TC7_treatment == 'A') %>% select(tcColumns[7]) %>% pull(tcColumns[7])

tc8M <- df %>% filter(TC8_treatment == 'M') %>% select(tcColumns[8]) %>% pull(tcColumns[8])
tc8A <- df %>% filter(TC8_treatment == 'A') %>% select(tcColumns[8]) %>% pull(tcColumns[8])

maxLn <- max(c(length(tc1M), length(tc1A)))
dfSplit <- data.frame(TC1_M = c(tc1M, rep(NA, maxLn - length(tc1M))),
                      TC1_A = c(tc1A, rep(NA, maxLn - length(tc1A))),
                      TC2_M = c(tc2M, rep(NA, maxLn - length(tc2M))),
                      TC2_A = c(tc2A, rep(NA, maxLn - length(tc2A))),
                      TC3_M = c(tc3M, rep(NA, maxLn - length(tc3M))),
                      TC3_A = c(tc3A, rep(NA, maxLn - length(tc3A))),
                      TC4_M = c(tc4M, rep(NA, maxLn - length(tc4M))),
                      TC4_A = c(tc4A, rep(NA, maxLn - length(tc4A))),
                      TC5_M = c(tc5M, rep(NA, maxLn - length(tc5M))),
                      TC5_A = c(tc5A, rep(NA, maxLn - length(tc5A))),
                      TC6_M = c(tc6M, rep(NA, maxLn - length(tc6M))),
                      TC6_A = c(tc6A, rep(NA, maxLn - length(tc6A))),
                      TC7_M = c(tc7M, rep(NA, maxLn - length(tc7M))),
                      TC7_A = c(tc7A, rep(NA, maxLn - length(tc7A))),
                      TC8_M = c(tc8M, rep(NA, maxLn - length(tc8M))),
                      TC8_A = c(tc8A, rep(NA, maxLn - length(tc8A))))

```

## Plot total test execution time per subject

```{r}
time_sum_bar <- barplot(height=df$TC_sum, names=df$ID, 
        col="#69b3a2",
        horiz=T, las=1,
        xlim=c(0, 1000),
        xlab="Sum of test case duration per participant in seconds",
        ylab="Paticipant ID"
        )
text(time_sum_bar, x=df$TC_sum-80 , paste(df$TC_sum, "sec", sep=" ") ,cex=1) 
```

## Violin plot per test case
```{r}
data <- df %>% select(all_of(tcColumns))

vioplot(data,
        col="#69b3a2",
        names=tcNames,
        ylab="Duration in seconds",
        xlab="Distribution of duration per test case"
        )
```
## Violin plot per test case with seperation of the treatments
```{r}
vioplot(dfSplit,
        col=c("gray","#69b3a2"),
        ylab="Duration in seconds",
        xlab="Distribution of duration per test case",
        cex.names=0.5
        )

steps <- seq(2.5, 14.5 , 2)

abline(v=steps, col="gray")
```
## Mean values per treatment

```{r}
dfSplitMean <- data.frame(TC1_M = mean(tc1M),
                      TC1_A = mean(tc1A),
                      TC2_M = mean(tc2M),
                      TC2_A = mean(tc2A),
                      TC3_M = mean(tc3M),
                      TC3_A = mean(tc3A),
                      TC4_M = mean(tc4M),
                      TC4_A = mean(tc4A),
                      TC5_M = mean(tc5M),
                      TC5_A = mean(tc5A),
                      TC6_M = mean(tc6M),
                      TC6_A = mean(tc6A),
                      TC7_M = mean(tc7M),
                      TC7_A = mean(tc7A),
                      TC8_M = mean(tc8M),
                      TC8_A = mean(tc8A))

dfSplitMean <- dfSplitMean %>%
  mutate_if(is.numeric, round, digits = 0) %>% 
  mutate(
    M_sum = rowSums(select(., ends_with("_M"))),
    A_sum = rowSums(select(., ends_with("_A"))))

```

